#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OCT Deep Learning System Demo
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠ OCT ‡πÅ‡∏ö‡∏ö Deep Learning
"""

import os
import sys
import time
from datetime import datetime

def print_banner():
    """Print system banner"""
    print("=" * 60)
    print("üî¨ OCT Deep Learning Fingerprint System Demo")
    print("‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠ OCT ‡πÅ‡∏ö‡∏ö Deep Learning")
    print("=" * 60)
    print()

def check_system_requirements():
    """Check system requirements and capabilities"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö...")
    print()
    
    requirements = {
        'Basic Requirements': [
            ('Python 3', sys.version_info >= (3, 6)),
            ('OpenCV', check_package('cv2')),
            ('NumPy', check_package('numpy')),
            ('Pillow', check_package('PIL')),
            ('PySerial', check_package('serial')),
            ('Tkinter', check_package('tkinter'))
        ],
        'Advanced Features': [
            ('ONNX Runtime', check_package('onnxruntime')),
            ('Scikit-learn', check_package('sklearn')),
            ('VGG19 Model', os.path.exists('models/vgg19-caffe2-9.onnx'))
        ]
    }
    
    for category, reqs in requirements.items():
        print(f"üìã {category}:")
        for name, available in reqs:
            status = "‚úÖ" if available else "‚ùå"
            print(f"   {status} {name}")
        print()
    
    # Determine system mode
    has_onnx = check_package('onnxruntime')
    has_vgg19 = os.path.exists('models/vgg19-caffe2-9.onnx')
    has_sklearn = check_package('sklearn')
    
    if has_onnx and has_vgg19:
        mode = "üöÄ Deep Learning Mode (Full Features)"
        mode_desc = "‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• VGG19 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Å‡∏±‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå + Advanced similarity"
    elif has_sklearn:
        mode = "üîß Computer Vision Mode (Advanced)"
        mode_desc = "‡πÉ‡∏ä‡πâ Computer Vision + Advanced similarity calculation"
    else:
        mode = "‚öôÔ∏è  Basic Mode"
        mode_desc = "‡πÉ‡∏ä‡πâ Computer Vision ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô + Basic similarity"
    
    print(f"üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î: {mode}")
    print(f"   {mode_desc}")
    print()
    
    return mode

def check_package(package_name):
    """Check if a package is available"""
    try:
        __import__(package_name)
        return True
    except ImportError:
        return False

def show_file_structure():
    """Show important files in the system"""
    print("üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:")
    print()
    
    important_files = [
        ('oct_deep_simple.py', '‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)'),
        ('oct_deep_fingerprint.py', '‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö'),
        ('README_DEEP_LEARNING.md', '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'),
        ('SYSTEM_COMPARISON.md', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°/‡πÉ‡∏´‡∏°‡πà'),
        ('setup_deep_system.sh', '‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á'),
        ('models/', '‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• Deep Learning'),
        ('user_models/', '‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
        ('oct_fingerprint_deep.sqlite', '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà')
    ]
    
    for filename, description in important_files:
        exists = os.path.exists(filename)
        status = "‚úÖ" if exists else "üìù"
        print(f"   {status} {filename:<30} - {description}")
    
    print()

def show_usage_examples():
    """Show usage examples"""
    print("üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print()
    
    examples = [
        {
            'title': '1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
            'command': 'python3 oct_deep_simple.py',
            'description': '‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å (GUI)'
        },
        {
            'title': '2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Deep Learning (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)',
            'command': 'pip install onnxruntime scikit-learn',
            'description': '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
        },
        {
            'title': '3. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• VGG19',
            'command': 'curl -L -o models/vgg19-caffe2-9.onnx https://github.com/onnx/models/raw/main/vision/classification/vgg/model/vgg19-caffe2-9.onnx',
            'description': '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Deep Learning'
        },
        {
            'title': '4. ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
            'command': './setup_deep_system.sh',
            'description': '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'
        }
    ]
    
    for example in examples:
        print(f"üìå {example['title']}:")
        print(f"   $ {example['command']}")
        print(f"   {example['description']}")
        print()

def show_workflow():
    """Show typical workflow"""
    print("üîÑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥:")
    print()
    
    steps = [
        "1Ô∏è‚É£  ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° oct_deep_simple.py",
        "2Ô∏è‚É£  ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'",
        "3Ô∏è‚É£  ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà",
        "4Ô∏è‚É£  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå B-scan (‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û OCT ‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏†‡∏≤‡∏û)",
        "5Ô∏è‚É£  ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•'",
        "6Ô∏è‚É£  ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à",
        "7Ô∏è‚É£  ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'",
        "8Ô∏è‚É£  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
        "9Ô∏è‚É£  ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û OCT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
        "üîü ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ú‡∏•"
    ]
    
    for step in steps:
        print(f"   {step}")
    
    print()

def show_troubleshooting():
    """Show common issues and solutions"""
    print("üõ†Ô∏è  ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢:")
    print()
    
    issues = [
        {
            'problem': 'NumPy version conflict',
            'solution': 'pip install "numpy<2.0"',
            'description': '‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô NumPy'
        },
        {
            'problem': 'Missing serial module', 
            'solution': 'pip install pyserial',
            'description': '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Arduino'
        },
        {
            'problem': 'ONNX Runtime ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
            'solution': '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ Basic mode ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
            'description': '‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥'
        },
        {
            'problem': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û B-scan',
            'solution': '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå',
            'description': '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: .png, .jpg, .jpeg, .bmp, .tiff'
        }
    ]
    
    for issue in issues:
        print(f"‚ùó ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {issue['problem']}")
        print(f"   üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {issue['solution']}")
        print(f"   üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {issue['description']}")
        print()

def interactive_demo():
    """Interactive demo menu"""
    while True:
        print("üéÆ ‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï:")
        print("   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°")
        print("   2. ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        print("   3. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        print("   4. ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        print("   5. ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        print("   6. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á")
        print("   0. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        print()
        
        try:
            choice = input("üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (0-6): ").strip()
            print()
            
            if choice == '0':
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OCT Deep Learning System!")
                break
            elif choice == '1':
                check_system_requirements()
            elif choice == '2':
                show_file_structure()
            elif choice == '3':
                show_usage_examples()
            elif choice == '4':
                show_workflow()
            elif choice == '5':
                show_troubleshooting()
            elif choice == '6':
                print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å...")
                print("   ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô: python3 oct_deep_simple.py")
                print()
                try:
                    os.system('python3 oct_deep_simple.py')
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è  ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å")
                    print()
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 0-6 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
                
        except KeyboardInterrupt:
            print("\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            break
        
        input("üîÑ ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...")
        print("\n" + "="*60)

def main():
    """Main demo function"""
    print_banner()
    
    # Quick system check
    mode = check_system_requirements()
    
    print("üìñ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:")
    print("   üìÑ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏ï‡πá‡∏°: README_DEEP_LEARNING.md")
    print("   üîÑ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏ö‡∏ö: SYSTEM_COMPARISON.md")
    print("   üéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: SUCCESS_DEEP_LEARNING_SYSTEM.md")
    print()
    
    # Ask user if they want interactive demo
    try:
        response = input("ü§ñ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").strip().lower()
        print()
        
        if response in ['y', 'yes', '‡πÉ‡∏ä‡πà', '1']:
            interactive_demo()
        else:
            print("üöÄ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
            print("   python3 oct_deep_simple.py")
            print()
            print("üìö ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå README_DEEP_LEARNING.md")
            
    except KeyboardInterrupt:
        print("\n\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OCT Deep Learning System!")

if __name__ == "__main__":
    main()
